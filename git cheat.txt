/////***Creating***////////
git init				:: creates .git files in directory
git clone [http]		:: clones repo

**Branching**
git tag -l 				:: Shows all tags
git checkout tags/v2.3 	:: checkouts tag
git branch -a 			:: shows all branch (local and remote) -r (remote branches)
git branch [name]		:: create new branch with [name]
git checkout			:: checkout branch
git checkout -b			:: creates and checkout new branch
git branch -d {branch}	:: delete branch-
git diff {b1} {b2}		:: diff between branches

**Staging/Unstaging**
git add .				:: stage all
git add [file name]		:: stage certain file
git add -i > a> *		:: track all untracked files
git reset [file path]	:: unstage 
git checkout .			:: discard all tracked files
gitk {file name}		:: show changes
git clean -n			:: discard untracked files

**Commiting**
git commit				:: stage with text editor
git commit -m "[mess]"	:: commit with message
git log --stat			:: view commits
git show {commit-id}	:: shows commit details

**Stashing**
git stash save "guacamole"	:: stashes change and rolls back HEAD
git stash apply stash^{/guacam} :: gets stash that matches expression
git stash apply 'stash@{0}' :: gets certain stash by number
git stash -u "name 		:: stash everything including new added files
git stash list			:: shows list of stashes
git stash show			:: inspect stash
git stash apply 		:: applies latest stash to current branch
git stash --keep-index	:: stash only unadded

**Remote**
git remote -v			:: shows all remote $$$$$$$$$ origin=forked dl-dev; upstream = ed-fi
git remote add {name}{url}:: add remote url with shortname
git fetch				:: downloads data from remote to local
git fetch --all			:: downloads all remote (origin and upstream)
git fetch --dry-run		:: shows all that needs to be updated
git pull				:: fetchs and merge remote to local
git push {remote name}	:: pushes to remote
git push -f 			:: pushes to remote and force rewrite the history

**misc**
git cherry pick {hash}..{to end of hash} :: grabs that commit range to your branch
git clean -xdf 			:: cleans repo as if freshly recloned
git reset --hard {hash}	:: resets to that commit, discards all uncommitted
git reset --soft		:: resets to that commit, keeps files changes but unstaged
git checkout {commit hash} :: go to that state


git reset --hard origin/CODS-301

git log --pretty=format:"%h %s" --graph :: pretty graph

git pull --ff-only upstream [branchname] :: keeps forked branch up-to-date with upstream(ed-fi alliance) ; checkout origin/dev branch first and use it for [branchname]
git push origin,  if there is differences


git fetch upstream pull/<id>/head:{w/e you want to name branch} :: gets branch of specific Pull request
git checkout <branch> ::checksout pr

rebase development branch on top of main branch
make sure origin is up to date with upstream
1) checkout development: git checkout ODS-1820-v3
2) git rebase development-v3
3) git push -f 


****Ed-Sight (no pr and only one working on tree) (clean commit history)***
create {feature branch} from master and do normal commit + push
git commit {hash of where it splits} : head goes to origin; keeps all changes to commit
git commit in chunks that makes sense, or all of it 
git push -f to rewrite everything
git rebase master => git push -f (if there are any differences)
git checkout master
git merge {feature-branch}
***everything will just plop on top of master as if commit was on top of master




///////////////////////////////////////////////////////////////

in the DoublelineDev, make the PR whatever you want to commit
when we do the PR to go back to Ed-Fi, we'll be moving tickets up, not the whole epic

todo:
	git branching behind and ahead 
	rebase
	http://dret.typepad.com/dretblog/2013/02/github-fork-etiquette.html
	
* skips subdirectory